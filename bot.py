import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from aiogram.types import CallbackQuery
from telethon import TelegramClient

import keyboards as kb
import sqlite_db as db
from datetime import datetime
import logging
import re
from aiogram.utils.exceptions import ChatNotFound

API_TOKEN = '6914750786:AAFyOGIcjW955NftwyaGI4Lcu-iGlPBni10'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


class NewGroup(StatesGroup):
    link = State()
    links = State()
    accounts = State()


class Replenish_balance(StatesGroup):
    currency = State()
    amount = State()


async def on_startup(_):
    await db.db_start()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message_handler(commands=['start'])
async def cmd_start_user(message: types.Message):
    logger.info("0Received start command from user %s", message.from_user.id)
    await message.answer_sticker('CAACAgIAAxkBAAEDZuVlx6DBQry15wn4Z03CwXTln4sWewAC2A8AAkjyYEsV-8TaeHRrmDQE')
    print(await db.check_user(message.from_user.id))
    if await db.check_user(message.from_user.id):
        cash = await db.get_cash(message.from_user.id)
    else:
        cash = 0
    if await db.return_group(message.from_user.id) == None:
        await message.answer("–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:", reply_markup=kb.user_kb)
        await message.answer(f"""


        1Ô∏è‚É£ –î–æ–±–∞–≤—å –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        2Ô∏è‚É£ –°–∫–∞–∂–∏ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –ø–æ–ø–∏—Å—á–∏–∫–æ–≤
        3Ô∏è‚É£ –î–æ–±–∞–≤—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –∏–Ω–≤–∞–π—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        4Ô∏è‚É£ –°–º–æ—Ç—Ä–∏ –æ—Ç—á–µ—Ç—ã –≤ –±–æ—Ç–µ
        ‚ö† –£—á—Ç–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç 3 –¥–æ 5 –ø–æ—Å–ø–∏—Å—á–∏–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö†
        –í–∞—à –±–∞–ª–∞–Ω—Å: {cash[0][0]}
        –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
        üëá
            """)
    else:
        markup2 = types.InlineKeyboardMarkup()
        print(await db.return_group(message.from_user.id))
        groups = await db.return_group(message.from_user.id)
        print(groups, 98342794)
        for group in groups:
            print(group[0])
            btn = types.InlineKeyboardButton(text=f'{group[1]}', callback_data=f'select_{group[0]}')
            markup2.add(btn)
        await message.answer("–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:", reply_markup=kb.user_kb)
        await message.answer(f"""
            1Ô∏è‚É£ –î–æ–±–∞–≤—å –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            2Ô∏è‚É£ –°–∫–∞–∂–∏ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –ø–æ–ø–∏—Å—á–∏–∫–æ–≤
            3Ô∏è‚É£ –î–æ–±–∞–≤—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –∏–Ω–≤–∞–π—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            4Ô∏è‚É£ –°–º–æ—Ç—Ä–∏ –æ—Ç—á–µ—Ç—ã –≤ –±–æ—Ç–µ
            ‚ö† –£—á—Ç–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç 3 –¥–æ 5 –ø–æ—Å–ø–∏—Å—á–∏–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö†
            –í–∞—à –±–∞–ª–∞–Ω—Å: {cash[0][0]}
            –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            üëá
                """, reply_markup=markup2)

    print(message.from_user.id)


async def check_role(update: types.Update):
    user_id = int(update.from_user.id)
    if await db.check_admin(user_id):
        print('Admin', user_id)
        return 'admin'
    else:
        print('User', user_id)
        return 'user'

@dp.message_handler(commands=['groups'])
async def show_groups(message: types.Message):
    await message.answer(await db.get_groups())



@dp.message_handler(text=['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª'])
async def new_group(message: types.Message):
    print(message.text)
    logger.info("1Received start command from user %s", message.from_user.id)
    await message.answer("""
–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚û°
–ü—Ä–∏–º–µ—Ä: https//:sdfsfsd/""")
    await NewGroup.link.set()


@dp.message_handler(state=NewGroup.link)
async def add_sub(message: types.Message, state: FSMContext):
    logger.info("2Received message %s in state NewGroup.link", message.text)
    try:
        async with state.proxy() as data:
            data['link'] = message.text
        check = await check_group(message, data['link'])
        if check:
            await message.answer("""
–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –¥–æ 5 –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
–ü—Ä–∏–º–µ—Ä: 
https//:sdfsfsd1/ 
https//:sdfsfsd2/ 
https//:sdfsfsd3/""")
            await NewGroup.next()
        elif check == None:
            await state.finish()
        else:
            await NewGroup.first()
        print(data['link'])
    except Exception as e:
        print(e)


@dp.message_handler(state=NewGroup.links)
async def add_account(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        text = message.text  # –í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        data['links'] = set(
            re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text))
        data['links'] = {link.rstrip(',') for link in data['links']}
    print(data['links'])
    # cleaned_urls = [url.strip().replace(" ", "") for url in data['links']]
    for link in data['links']:
        print(link, 123)
        if link.startswith('https'):
            print(link, 382724238)
            check = True
        else:
            check = False
            await message.reply('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç2')
            await NewGroup.previous()
    if check:
        await message.answer("–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å?\n–ü—Ä–∏–º–µ—Ä: 3")
        await NewGroup.next()


@dp.message_handler(state=NewGroup.accounts)
async def add_group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['accounts'] = message.text
            accounts = int(data['accounts'])
        except:
            await NewGroup.previous()
    print(data['accounts'])
    print(isinstance(accounts, int))
    if isinstance(accounts, int):
        print(accounts, 1000)
        #     check group
        links = ''
        links_cancel = ''
        print(data['links'])
        l = data['links'].copy()
        members_count = 0
        for link in l:
            if 't.me' in link:
                chat_id = link.split('/')[-1]
                if chat_id.startswith('+'):
                    chat_id = chat_id[1:]
                elif chat_id.startswith('@'):
                    chat_id = chat_id[1:]
                else:
                    chat_id = f"@{chat_id}"
            else:
                await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç")
                return False
            try:
                chat = await bot.get_chat(chat_id)
                members_count += await chat.get_members_count()
                print(await chat.get_members_count())
            except:
                pass

            print(link)
            check = await check_group(message, link)
            if check:
                links += f'{chat.title}({link}) ‚úÖ\n'
            else:
                try:
                    links_cancel += f'{chat.title}({link}) ‚õî\n'
                except Exception as e:
                    links_cancel += f'{link} ‚õî\n'
                data['links'].remove(link)

        if links_cancel != '':
            await message.answer(f"–≠—Ç–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–∞—Ä—Å–µ–Ω—ã:\n{links_cancel}")
        else:
            pass
        cost = 50
        user_id = message.from_user.id
        cash_result = await db.get_cash(user_id)  # –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        balance = int(cash_result[0][0])

        await message.answer(f"""
‚úÖ–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:
{links}
üíª-–°–æ–≤–æ–∫—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º—ã –ø–æ–ª—É—á–∏–º {members_count} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - (–£—Å–ª—É–≥–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤)""")
        if (cost * accounts) > balance:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å–ª—É–≥–∏", reply_markup=kb.popolnit)
            await state.finish()
        else:
            await message.answer(f"""
–î–æ–±–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
üî∏ –í–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}
üîπ–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: {cost * accounts} —Ä—É–±–ª–µ–π 
ü§ñ–í—ã –≤—ã–±—Ä–∞–ª–∏ {accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤

üí∞–¶–µ–Ω–∞ –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç–∞ 50 —Ä—É–±./–º–µ—Å—è—Ü
‚ûï–í–∫–ª—é—á–µ–Ω–æ: –ø—Ä–æ–∫—Å–∏, —Å–µ—Ä–≤–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥ –±–∞–∑—ã –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –±–∞–Ω–∞  –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!
‚ö†–û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç  –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–∞–π—Ç–∏—Ç –æ—Ç 3 –¥–æ 5 —é–∑–µ—Ä–æ–≤ –≤ –≤—ã—à—É –≥—Ä—É–ø–ø—É –≤ –¥–µ–Ω—å! 

ü§©1 –∞–∫–∫–∞—É–Ω—Ç –∑–∞ 50 —Ä—É–±. = 100-150 –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ –º–µ—Å—è—Üü§©""", reply_markup=kb.popolnit)
            deposite = int(cost * accounts) * -1
            await state.finish()
            date_obj = datetime.today().strftime('%d.%m.%Y 12:00:00')
            print(date_obj)
            print(type(int(data['accounts'])))
            await send_admin(message, user_id, data['link'], data['links'], data['accounts'], date_obj, deposite)
            await message.answer(
                (await db.add_group(user_id, data['link'], links, data['accounts'], date_obj, deposite)))
            # await db.cash(deposite, user_id)


    else:
        await message.reply('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç3')
        await NewGroup.previous()


async def send_admin(message, user_tg_id, link, links, account, date_obj, deposite):
    admins = await db.get_admins()
    print(admins, 9387)
    admin_check = InlineKeyboardMarkup()
    ac = InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_{user_tg_id}_{link}_{deposite}')
    re = InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'reject_{user_tg_id}_{link}_{deposite}')
    admin_check.row(ac, re)
    for admin in admins:
        admin = admin[0]
        print(admin)
        await bot.send_message(admin, text=f"""
–ö–ª–∏–µ–Ω—Ç: @{message.from_user.username}
–ì—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª: {link}
–ò—Å—Ç–æ—á–Ω–∏–∫ —é–∑–µ—Ä–æ–≤: {links}
–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account}""", reply_markup=admin_check)


@dp.message_handler(text='''–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–π—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–ø–ø–æ—Ä—Ç—É''')
async def accept_group(message):
    user_id = message.from_user.id


@dp.callback_query_handler(lambda call: call.data.startswith('select_'))
async def callback_handler(call: CallbackQuery):
    group = call.data.split('_')[1]
    print(group)
    info = await db.get_info_group(group)
    group_options = InlineKeyboardMarkup()
    process_b = InlineKeyboardButton('–ü–∞—É–∑–∞/–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–≤–∞–π—Ç', callback_data=f'process_{group}')
    delete_b = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–Ω–≤–∞–π—Ç', callback_data=f'delete_{group}')
    change_b = InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data=f'change_{group}')
    popolnit = InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'popolnit')
    main_menu = InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ', callback_data=f'menu')
    group_options.add(process_b, delete_b, change_b, popolnit, main_menu)
    if group:
        await call.message.answer(info, reply_markup=kb.group_options)
    else:
        await call.message.answer('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç')


@dp.callback_query_handler(lambda call: call.data.startswith('process_'))
async def process(call: CallbackQuery):
    group = int(call.data.split('_')[1])
    user_id = call.message.from_user.id
    await db.change_proccess(user_id, group)


@dp.callback_query_handler(lambda call: call.data.startswith('delete_'))
async def delete(call: CallbackQuery):
    group = int(call.data.split('_')[1])
    user_id = call.message.from_user.id
    await db.delete_group(user_id, group)


@dp.callback_query_handler(lambda call: call.data.startswith('change_'))
async def process(call: CallbackQuery):
    group = call.data.split('_')[1]
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
    await new_group(call.message)


@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
    await message.answer(f'ID: {message.from_user.id}')


@dp.message_handler(commands=['accounts'])
async def invite_group(message: types.Message):
    accounts = await db.get_accounts_from_db()
    print(accounts)
    for account in accounts:
        await message.answer(f"""
api_id:{account['api_id']}
api_hash:{account['api_hash']}
phone:{account['phone']}
session:{account['session_tg']}""")


async def check_group(message: types.Message, link):
    if 't.me' in link:
        chat_id = link.split('/')[-1]
        if chat_id.startswith('+'):
            chat_id = chat_id[1:]
        elif chat_id.startswith('@'):
            chat_id = chat_id[1:]
        else:
            chat_id = f"@{chat_id}"
    else:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç", reply_markup=kb.cancel)
        return None

    try:
        chat = await bot.get_chat(chat_id)
        print(chat_id, chat.type)
        if chat.type in ['group', 'supergroup', 'channel']:
            # await message.reply(f"–ì—Ä—É–ø–ø–∞ {chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            return True
        else:
            await message.reply("–í —ç—Ç—É –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤1")
            return False
    except ChatNotFound:
        await message.reply("–í —ç—Ç—É –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤. ChatNotFound")
        return False
    except Exception as e:
        await message.reply(f"–í —ç—Ç—É –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤. –û—à–∏–±–∫–∞: {str(e)}")
        return False


@dp.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
@dp.callback_query_handler(text="popolnit")
async def replenish(call):
    try:
        message = call.message
    except:
        message = call
        user_id = message.from_user.id
        cash_result = await db.get_cash(user_id)
        if cash_result == []:
            balance = 0
        else:
            balance = cash_result[0][0]
        await message.answer(f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å {balance} —Ä—É–±.', reply_markup=kb.currency)
        await Replenish_balance.currency.set()


@dp.message_handler(state=Replenish_balance.currency)
async def get_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['currency'] = message.text
        print(data['currency'])
    if data['currency'] == 'RUB' or data['currency'] =='USD' or data['currency'] == 'USDT':
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {data['currency']} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n(–º–∏–Ω–∏–º—É–º 100—Ä—É–±/1$)\n–ü—Ä–∏–º–µ—Ä: 500")
        await Replenish_balance.next()
    else:
        await message.reply('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–ª–∏ –≤–∞–ª—é—Ç—É')
        await Replenish_balance.previous()



@dp.message_handler(state=Replenish_balance.amount)
async def check_replenish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
    try:
        amount = int(data['amount'])
        if isinstance(amount, float or int):
            if data['amount'] < 100 and data['currency'] == 'RUB':
                await message.answer('–í—ã –≤–µ–ª–∏ –º–∞–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ —Å—Ä–µ–¥—Å—Ç–≤, –≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å—É–º–º—É\n–ú–∏–Ω–∏–º—É–º 100—Ä—É–±./1$')
                await Replenish_balance.previous()
            elif data['amount'] < 1 and data['currency'] == 'USD':
                await message.answer('–í—ã –≤–µ–ª–∏ –º–∞–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ —Å—Ä–µ–¥—Å—Ç–≤, –≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å—É–º–º—É\n–ú–∏–Ω–∏–º—É–º 100—Ä—É–±./1$')
                await Replenish_balance.previous()
            elif data['amount'] < 1 and data['currency'] == 'USDT':
                await message.answer('–í—ã –≤–µ–ª–∏ –º–∞–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ —Å—Ä–µ–¥—Å—Ç–≤, –≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å—É–º–º—É\n–ú–∏–Ω–∏–º—É–º 100—Ä—É–±./1$')
                await Replenish_balance.previous()
            else:
                pass
            await message.answer(f"""
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ: {data['amount']} {data['currency']}
    –ù–∞ —Å—á–µ—Ç: 4444 5555 6666 (–°–±–µ—Ä)

    –í–∞—à ID: {message.from_user.id}
    *–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—è–±–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ —Å–≤–æ–∏–º ID  - @vicm_pro""", reply_markup=kb.main_menu)
            admin_ids = await db.get_admins()
            for id in admin_ids:
                await bot.send_message(id[0], f"–Æ–∑–µ—Ä {message.from_user.username}(ID:{message.from_user.id}) —Ö–æ—Ç–µ–ª –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {data['amount']}{data['currency']}")

            await state.finish()
        else:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ–ª–∏ —Å—É–º–º–∞, –≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
            await Replenish_balance.previous()
    except:
        await message.answer("–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ–ª–∏ —Å—É–º–º—É, –≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        await Replenish_balance.previous()


async def weekly_report():
    sent_notifications = set()
    while True:
        try:
            groups = await db.get_groups()
            dates = await db.get_date()

            for date in dates:
                print(date)
                for project in groups:
                    deadline_date = datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
                    current_time = datetime.now()
                    days_left = (current_time - deadline_date).days
                    group_id, project_name, _, _ = project

                    if days_left == 7 and group_id not in sent_notifications:
                        group = await db.get_info_group(group_id)
                        mess = await bot.send_message(975713395,
                                                      f"""–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é!
üî∏{group[2]}
ü§ñ - {group[4]}
‚ûï –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ–±–∞–≤–ª–µ–Ω–æ {group[5]} —é–∑–µ—Ä–æ–≤
üîú –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è {group[6]}""")
                        sent_notifications.add(group_id)
                        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", mess)

                    elif days_left < 7 and group_id not in sent_notifications:
                        pass
                    else:
                        print("qwe")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:", e)
        await asyncio.sleep(3600)


loop = asyncio.get_event_loop()
loop.create_task(weekly_report())

@dp.callback_query_handler(text="support")
async def support(call):
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É - @vicm_pro', kb.main_menu)


@dp.message_handler(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')
@dp.callback_query_handler(text="menu")
async def back_to_main_menu(call):
    await cmd_start_user(call.message)


class Announcement(StatesGroup):
    message_text = State()

class Account(StatesGroup):
    api_id = State()
    api_hash = State()
    phone = State()
    code = State()

class Proxy(StatesGroup):
    addr = State()
    port = State()
    name = State()
    password = State()


def admin_access(func):
    async def wrapper(message: types.Message):
        user_id = str(message.from_user.id)
        if await db.check_admin(user_id):
            await message.answer('–í—ã –∞–¥–º–∏–Ω')
            await func(message)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞')
    return wrapper

@admin_access
@dp.message_handler(commands=['add'])
async def add_cash(message: types.Message):
    print(message.text.split(' '))
    user_id = message.text.split(' ')[1]
    cash = message.text.split(' ')[2]
    await db.cash(cash, user_id)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–Ω–µ—Å–µ–Ω—ã")

@admin_access
@dp.message_handler(commands=['adminka'])
async def cmd_start_admin(message: types.Message):
    await message.answer_sticker('CAACAgIAAxkBAAEDZuVlx6DBQry15wn4Z03CwXTln4sWewAC2A8AAkjyYEsV-8TaeHRrmDQE')
    await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InviteBot!')
    await message.answer(await db.get_info_admin(), reply_markup=kb.adminka)

@admin_access
@dp.message_handler(commands=['adminka_on'])
async def add_admin(message: types.Message):
    try:
        user_id = int(message.text.split(' ')[1])
        if await db.check_admin(user_id) is not True:
            await db.add_admin(user_id)
            await message.answer('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer('–ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    except (IndexError, ValueError):
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID')

@admin_access
@dp.message_handler(commands=['adminka_off'])
async def remove_admin(message: types.Message):
    try:
        user_id = int(message.text.split(' ')[1])
        print(user_id)
        if await db.check_admin(user_id):
            await db.remove_admin(user_id)
            await message.answer('–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω')
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –ë–î –Ω–µ—Ç')
    except (IndexError, ValueError):
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID')

@admin_access
@dp.message_handler(text='–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
async def handle_announcement_initiation(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await Announcement.message_text.set()



@dp.message_handler(state=Announcement.message_text)
async def receive_announcement(message: types.Message, state: FSMContext):
    announcement_text = message.text
    user_ids = await db.get_user()
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, announcement_text)
        except Exception as e:
            print(f"Failed to send message to {user_id}: {e}")
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    await state.finish()

@admin_access
@dp.callback_query_handler(lambda call: call.data.startswith('accept_'))
async def accept_group(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = int(call.data.split('_')[1])
    group_name =call.data.split('_')[2]
    deposite = call.data.split('_')[3]
    print(group_name, 421243)
    await bot.send_message(user_id, """
–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
–ò–Ω–≤–∞–π—Ç –∑–∞–ø—É—â–µ–Ω
–ö–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é""", reply_markup=kb.main_menu)
    await db.accept_group(user_id, group_name)
    await db.cash(deposite, user_id)

@admin_access
@dp.callback_query_handler(lambda call: call.data.startswith('cancel_'))
async def cancel_group(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = int(call.data.split('_')[1])
    group_name = call.data.split('_')[2]
    print(group_name, 421243)
    await bot.send_message(user_id, """
–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–π—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–ø–ø–æ—Ä—Ç—É""", reply_markup=kb.main_menu)

@admin_access
@dp.message_handler(commands=['cash'])
async def add_cash(message: types.Message):
    print(message.text.split(' '))
    user_id = message.text.split(' ')[1]
    cash = message.text.split(' ')[2]
    await db.cash(cash, user_id)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–Ω–µ—Å–µ–Ω—ã")

@admin_access
@dp.message_handler(commands=['accounts'])
async def cmd_accounts(message: types.Message):
    await message.answer(await db.get_accounts_from_db())

@admin_access
@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã')
async def add_account(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ API ID:')
    await Account.api_id.set()


@dp.message_handler(state=Account.api_id)
async def api_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['api_id'] = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ API HASH:")
    await Account.next()


@dp.message_handler(state=Account.api_hash)
async def api_hash(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['api_hash'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: \n–ü—Ä–∏–º–µ—Ä: +996998123456')
    await Account.next()


@dp.message_handler(state=Account.phone)
async def phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
    if data['phone'][0] == "+":
        await Account.next()
    else:
        await message.answer('–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ')
        await state.reset_state()

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot = message.bot

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    client = TelegramClient(data['phone'], int(data['api_id']), data['api_hash'])

    try:
        await client.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await client.is_user_authorized():
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await client.send_code_request(data['phone'])
            await bot.send_message(message.chat.id, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
            await Account.code.set() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return


@dp.message_handler(state=Account.code)
async def code_confirmation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code'] = int(message.text)
        print(data['code'])
        session = f'./bot/session_accounts/{data["phone"]}.session'

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # bot = message.bot
    print((data['api_id'], data['api_hash'], session))
    await message.answer((data['api_id'], data['api_hash'], session))
    print(1234)
    if data['code'] == '.':
        print(1000101010010)
        await Account.previous()
    try:
        async with TelegramClient(session, int(data['api_id']), data['api_hash']) as client:
            print(4321)
            await client.connect()
            print(11111)
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if not await client.is_user_authorized():
            await client.sign_in(data['phone'], data['code'])
            print(2222)
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç {data['phone']}.")
            print(333)
            await db.add_account(data['api_id'], data['api_hash'], data['phone'], session)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@admin_access
@dp.message_handler(commands=['proxy'])
async def add_proxy(message: types.Message):
    await message.answer(await db.get_proxies_from_db())

@admin_access
@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
async def add_proxy(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ (IP –∏–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è):')
    await Proxy.addr.set()

@dp.message_handler(state=Proxy.addr)
async def proxy_addr(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['addr'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏:")
    await Proxy.port.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(state=Proxy.port)
async def proxy_port(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['port'] = int(message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):')
    await Proxy.name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(state=Proxy.name)
async def proxy_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):')
    await Proxy.password.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(state=Proxy.password)
async def proxy_password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password'] = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        proxy = {
            'proxy_type': 'socks5',  # –¢–∏–ø –ø—Ä–æ–∫—Å–∏ (http, socks5, etc.)
            'addr': data['addr'],
            'port': data['port'],
            'username': data['username'],
            'password': data['password']
        }
        proxies = await db.get_proxies_from_db()
        count_proxy = int(len(proxies))
        session_proxy = f'./bot/session_proxy/proxy_{count_proxy+1}'

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å –ø—Ä–æ–∫—Å–∏
        client = TelegramClient(session_proxy, 'api_id', 'api_hash', proxy=proxy)
        await client.connect()

        if await client.is_user_authorized():
            await db.add_proxy(state)
            await message.answer('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.')
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏.')

        await client.disconnect()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # db.add_proxy(data['addr'], data['port'], data['username'], data['password'])
        await message.answer('–ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')

    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}')
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSMContext


@dp.message_handler(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')
@dp.callback_query_handler(text="menu")
async def back_to_main_menu(call):
    try:
        message = call.message
    except:
        message = call
        if check_role() == 'admin':
            await cmd_start_admin(message)
        else:
            await cmd_start_user(message)


@dp.message_handler(text=['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∏—Ç—å'])
@dp.callback_query_handler(text="cancel")
async def back(call):
    try:
        message = call.message
    except:
        message = call
        if check_role() == 'admin':
            await cmd_start_admin(message)
        else:
            await cmd_start_user(message)

@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
